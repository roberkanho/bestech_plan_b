mindmeld.components package
***************************

This module contains the components of the MindMeld platform

class mindmeld.components.Conversation(app=None, app_path=None, nlp=None, context=None, default_params=None, force_sync=False)

   Bases: "object"

   The conversation object is a very basic MindMeld client.

   It can be useful for testing out dialogue flows in python.

   -[ Example ]-

   >>> convo = Conversation(app_path='path/to/my/app')
   >>> convo.say('Hello')
   ['Hello. I can help you find store hours. How can I help?']
   >>> convo.say('Is the store on elm open?')
   ['The 23 Elm Street Kwik-E-Mart is open from 7:00 to 19:00.']

   history

      *list* – The history of the conversation. Starts with the most
      recent message.

   context

      *dict* – The context of the conversation, containing user
      context.

   default_params

      *Params* – The default params to use with each turn. These
      defaults will be overridden by params passed for each turn.

   params

      *FrozenParams* – The params returned by the most recent turn.

   force_sync

      *bool* – Force synchronous return for *say()* and *process()*
      even when app is in async mode.

   process(text, params=None, force_sync=False)

      Send a message in the conversation. The message will be
      processed by the app based on the current state of the
      conversation and returns the response.

      Parameters:
         * **text** (*str*) – The text of a message.

         * **params** (*dict*) – The params to use with this
           message, overriding any defaults which may have been set.

         * **force_sync** (*bool**, **optional*) – Force synchronous
           response even when app is in async mode.

      Returns:
         The dictionary response.

      Return type:
         (dict)

   reset()

      Reset the history, frame and params of the Conversation object.

   say(text, params=None, force_sync=False)

      Send a message in the conversation. The message will be
      processed by the app based on the current state of the
      conversation and returns the extracted messages from the
      directives.

      Parameters:
         * **text** (*str*) – The text of a message.

         * **params** (*dict*) – The params to use with this
           message, overriding any defaults which may have been set.

         * **force_sync** (*bool**, **optional*) – Force synchronous
           response even when app is in async mode.

      Returns:
         A text representation of the dialogue responses.

      Return type:
         (list)

class mindmeld.components.DialogueResponder(frame=None, params=None, history=None, slots=None, request=None, dialogue_state=None, directives=None)

   Bases: "object"

   The dialogue responder helps generate directives and fill slots in
   the system-generated natural language responses.

   class DirectiveNames

      Bases: "object"

      A constants object for directive names.

      LIST = 'list'

      LISTEN = 'listen'

      REPLY = 'reply'

      RESET = 'reset'

      SPEAK = 'speak'

      SUGGESTIONS = 'suggestions'

   class DirectiveTypes

      Bases: "object"

      A constants object for directive types.

      ACTION = 'action'

      VIEW = 'view'

   act(name, payload=None)

      Adds an arbitrary directive of type ‘action’.

      Parameters:
         * **name** (*str*) – The name of the directive.

         * **payload** (*dict**, **optional*) – The payload for the
           action.

   direct(name, dtype, payload=None)

      Adds an arbitrary directive.

      Parameters:
         * **name** (*str*) – The name of the directive.

         * **dtype** (*str*) – The type of the directive.

         * **payload** (*dict**, **optional*) – The payload for the
           view.

   display(name, payload=None)

      Adds an arbitrary directive of type ‘view’.

      Parameters:
         * **name** (*str*) – The name of the directive.

         * **payload** (*dict**, **optional*) – The payload for the
           view.

   exit_flow()

      Exit the current flow by clearing the target dialogue state.

   list(items)

      Adds a ‘list’ view directive.

      Parameters:
         **items** (*list*) – The list of dictionary objects.

   listen()

      Adds a ‘listen’ directive.

   prompt(text)

      Alias for *reply()*. Deprecated.

      Parameters:
         **text** (*str*) – The text of the reply.

   reply(text)

      Adds a ‘reply’ directive.

      Parameters:
         **text** (*str*) – The text of the reply.

   reset()

      Adds a ‘reset’ directive.

   respond(directive)

      Adds an arbitrary directive.

      Parameters:
         **directive** (*dict*) – A directive.

   speak(text)

      Adds a ‘speak’ directive.

      Parameters:
         **text** (*str*) – The text to speak aloud.

   suggest(suggestions)

      Adds a ‘suggestions’ directive.

      Parameters:
         **suggestions** (*list*) – A list of suggestions.

   static to_json(instance)

      Convert the responder into a JSON representation. :param
      instance: The responder object. :type instance:
      DialogueResponder

      Returns:
         The JSON representation.

      Return type:
         (dict)

class mindmeld.components.DialogueManager(responder_class=None, async_mode=False)

   Bases: "object"

   add_dialogue_rule(name, handler, **kwargs)

      Adds a dialogue state rule for the dialogue manager.

      Parameters:
         * **name** (*str*) – The name of the dialogue state.

         * **handler** (*function*) – The dialogue state handler
           function.

         * **kwargs** (*dict*) – A list of options to be passed to
           the DialogueStateRule initializer.

   add_middleware(middleware)

      Adds middleware for the dialogue manager. Middleware will be
      called for each message before the dialogue state handler.
      Middleware registered first will be called first.

      Parameters:
         **middleware** (*callable*) – A dialogue manager middleware
         function.

   apply_handler(request, responder, target_dialogue_state=None)

      Applies the dialogue state handler for the most complex matching
      rule.

      Parameters:
         * **request** (*Request*) – The request object.

         * **responder** (*DialogueResponder*) – The responder
           object.

         * **target_dialogue_state** (*str**, **optional*) – The
           target dialogue state.

      Returns:
         A dict containing the dialogue state and directives.

      Return type:
         (dict)

   handle(**kwargs)

      A decorator that is used to register dialogue state rules.

   middleware(*args)

      A decorator that is used to register dialogue handler
      middleware.

   logger = <Logger mindmeld.components.dialogue.DialogueManager (NOTSET)>

class mindmeld.components.NaturalLanguageProcessor(app_path, resource_loader=None, config=None)

   Bases: "mindmeld.components.nlp.Processor"

   The natural language processor is the MindMeld component
   responsible for understanding the user input using a hierarchy of
   natural language processing models.

   domain_classifier

      *DomainClassifier* – The domain classifier for this application.

   extract_allowed_intents(allowed_intents)

      This function validates a user inputted list of allowed_intents
      against the NLP hierarchy and construct a hierarchy dictionary
      as follows: "{domain: {intent: {}}" if the validation of
      allowed_intents has passed.

      Parameters:
         **allowed_intents** (*list*) – A list of allowable intents in
         the format “domain.intent”.                 If all intents
         need to be included, the syntax is “domain.*”.

      Returns:
         A dictionary of NLP hierarchy.

      Return type:
         (dict)

   inspect(markup, domain=None, intent=None, dynamic_resource=None)

      Inspect the marked up query and print the table of features and
      weights.

      Parameters:
         * **markup** (*str*) – The marked up query string.

         * **domain** (*str*) – The gold value for domain
           classification.

         * **intent** (*str*) – The gold value for intent
           classification.

         * **dynamic_resource** (*dict**, **optional*) – A dynamic
           resource to aid NLP inference.

   process(query_text, allowed_nlp_classes=None, allowed_intents=None, language=None, time_zone=None, timestamp=None, dynamic_resource=None, verbose=False)

      Processes the given query using the full hierarchy of natural
      language processing models         trained for this application.

      Parameters:
         * **query_text** (*str**, **tuple*) – The raw user text
           input, or a list of the n-best query transcripts from ASR.

         * **allowed_nlp_classes** (*dict**, **optional*) – A
           dictionary of the NLP hierarchy that is selected for NLP
           analysis. An example: "{'smart_home': {'close_door': {}}}"
           where smart_home is the domain and close_door is the
           intent.

         * **allowed_intents** (*list**, **optional*) – A list of
           allowed intents to use for                 the NLP
           processing.

         * **language** (*str**, **optional*) – Language as
           specified using a 639-2 code;                 if omitted,
           English is assumed.

         * **time_zone** (*str**, **optional*) – The name of an IANA
           time zone, such as                 ‘America/Los_Angeles’,
           or ‘Asia/Kolkata’                 See the [tz
           database](https://www.iana.org/time-zones) for more
           information.

         * **timestamp** (*long**, **optional*) – A unix time stamp
           for the request (in seconds).

         * **dynamic_resource** (*dict**, **optional*) – A dynamic
           resource to aid NLP inference.

         * **verbose** (*bool**, **optional*) – If True, returns
           class probabilities along with class
           prediction.

      Returns:
         A processed query object that contains the prediction results
         from                 applying the full hierarchy of natural
         language processing models to the input
         query.

      Return type:
         (ProcessedQuery)

   process_query(query, allowed_nlp_classes=None, dynamic_resource=None, verbose=False)

      Processes the given query using the full hierarchy of natural
      language processing models         trained for this application.

      Parameters:
         * **query** (*Query**, **tuple*) – The user input query, or
           a list of the n-best transcripts                 query
           objects.

         * **allowed_nlp_classes** (*dict**, **optional*) – A
           dictionary of the NLP hierarchy that is selected for NLP
           analysis. An example: "{'smart_home': {'close_door': {}}}"
           where smart_home is the domain and close_door is the
           intent. If "allowed_nlp_classes" is "None", we just use the
           normal model predict                 functionality.

         * **dynamic_resource** (*dict**, **optional*) – A dynamic
           resource to aid NLP inference.

         * **verbose** (*bool**, **optional*) – If True, returns
           class probabilities along with class
           prediction.

      Returns:
         A processed query object that contains the prediction results
         from                 applying the full hierarchy of natural
         language processing models to the input
         query.

      Return type:
         (ProcessedQuery)

   domains

      The domains supported by this application.

class mindmeld.components.QuestionAnswerer(app_path, resource_loader=None, es_host=None)

   Bases: "object"

   The question answerer is primarily an information retrieval system
   that provides all the necessary functionality for interacting with
   the application’s knowledge base.

   build_search(index, ranking_config=None)

      Build a search object for advanced filtered search.

      Parameters:
         * **index** (*str*) – index name of knowledge base object.

         * **ranking_config** (*dict*) – overriding ranking
           configuration parameters.

      Returns:
         a Search object for filtered search.

      Return type:
         Search

   config(config)

      Summary

      Parameters:
         **config** – Description

   get(index, **kwargs)

      Gets a collection of documents from the knowledge base matching
      the provided search criteria. This API provides a simple
      interface for developers to specify a list of knowledge base
      field and query string pairs to find best matches in a similar
      way as in common Web search interfaces. The knowledge base
      fields to be used depend on the mapping between NLU entity types
      and corresponding knowledge base objects. For example, a
      “cuisine” entity type can be mapped to either a knowledge base
      object or an attribute of a knowledge base object. The mapping
      is often application specific and is dependent on the data model
      developers choose to use when building the knowledge base.

      -[ Examples ]-

      >>> question_answerer.get(index='menu_items',
                                name='pork and shrimp',
                                restaurant_id='B01CGKGQ40',
                                _sort='price',
                                _sort_type='asc')

      Parameters:
         * **index** (*str*) – The name of an index.

         * **id** (*str*) – The id of a particular document to
           retrieve.

         * **_sort** (*str*) – Specify the knowledge base field for
           custom sort.

         * **_sort_type** (*str*) – Specify custom sort type. Valid
           values are ‘asc’, ‘desc’ and ‘distance’.

         * **_sort_location** (*dict*) – The origin location to be
           used when sorting by distance.

      Returns:
         A list of matching documents.

      Return type:
         list

   classmethod load_kb(app_namespace, index_name, data_file, es_host=None, es_client=None, connect_timeout=2)

      Loads documents from disk into the specified index in the
      knowledge base. If an index with the specified name doesn’t
      exist, a new index with that name will be created in the
      knowledge base.

      Parameters:
         * **app_namespace** (*str*) – The namespace of the app.
           Used to prevent collisions between the indices of this app
           and those of other apps.

         * **index_name** (*str*) – The name of the new index to be
           created.

         * **data_file** (*str*) – The path to the data file
           containing the documents to be imported into the knowledge
           base index. It could be either json or jsonl file.

         * **es_host** (*str*) – The Elasticsearch host server.

         * **es_client** (*Elasticsearch*) – The Elasticsearch
           client.

         * **connect_timeout** (*int**, **optional*) – The amount of
           time for a connection to the Elasticsearch host.

class mindmeld.components.EntityResolver(app_path, resource_loader, entity_type, es_host=None, es_client=None)

   Bases: "object"

   An entity resolver is used to resolve entities in a given query to
   their canonical values (usually linked to specific entries in a
   knowledge base).

   fit(clean=False)

      Loads an entity mapping file to Elasticsearch for text relevance
      based entity resolution.

      In addition, the synonyms in entity mapping are imported to
      knowledge base indexes if the corresponding knowledge base
      object index and field name are specified for the entity type.
      The synonym info is then used by Question Answerer for text
      relevance matches.

      Parameters:
         **clean** (*bool*) – If "True", deletes and recreates the
         index from scratch instead of updating the existing index
         with synonyms in the mapping.json.

   classmethod ingest_synonym(app_namespace, index_name, index_type='syn', field_name=None, data=None, es_host=None, es_client=None, use_double_metaphone=False)

      Loads synonym documents from the mapping.json data into the
      specified index. If an index with the specified name doesn’t
      exist, a new index with that name will be created.

      Parameters:
         * **app_namespace** (*str*) – The namespace of the app.
           Used to prevent collisions between the indices of this app
           and those of other apps.

         * **index_name** (*str*) – The name of the new index to be
           created.

         * **index_type** (*str*) – specify whether to import to
           synonym index or knowledge base object index.
           INDEX_TYPE_SYNONYM is the default which indicates the
           synonyms to be imported to synonym index, while
           INDEX_TYPE_KB indicates that the synonyms should be
           imported into existing knowledge base index.

         * **field_name** (*str*) – specify name of the knowledge
           base field that the synonym list corresponds to when
           index_type is INDEX_TYPE_SYNONYM.

         * **data** (*list*) – A list of documents to be loaded into
           the index.

         * **es_host** (*str*) – The Elasticsearch host server.

         * **es_client** (*Elasticsearch*) – The Elasticsearch
           client.

         * **use_double_metaphone** (*bool*) – Whether to use the
           phonetic mapping or not.

   load()

      Loads the trained entity resolution model from disk.

   predict(entity)

      Predicts the resolved value(s) for the given entity using the
      loaded entity map or the trained entity resolution model.

      Parameters:
         **entity** (*Entity**, **tuple*) – An entity found in an
         input query, or a list of n-best entity
         objects.

      Returns:
         The top 20 resolved values for the provided entity.

      Return type:
         (list)

   ES_SYNONYM_INDEX_PREFIX = 'synonym'

class mindmeld.components.Preprocessor

   Bases: "abc.ABC"

   Base class for Preprocessor object

   get_char_index_map(raw_text, processed_text)

      Generates character index mapping from processed query to raw
      query.

      See the Tokenizer class for a similar implementation.

      Parameters:
         * **raw_text** (*str*) –

         * **processed_text** (*str*) –

      Returns:
         A tuple consisting of two maps, forward and backward

      Return type:
         (dict, dict)

   process(text)

      Parameters:
         **text** (*str*) –

      Returns:
         (str)


Submodules
==========

* mindmeld.components.classifier module

* mindmeld.components.dialogue module

* mindmeld.components.domain_classifier module

* mindmeld.components.entity_recognizer module

* mindmeld.components.entity_resolver module

* mindmeld.components.intent_classifier module

* mindmeld.components.nlp module

* mindmeld.components.parser module

* mindmeld.components.preprocessor module

* mindmeld.components.question_answerer module

* mindmeld.components.request module

* mindmeld.components.role_classifier module
